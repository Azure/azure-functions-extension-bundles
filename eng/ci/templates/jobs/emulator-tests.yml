# Azure Functions Extension Bundle - Emulator Tests CI Job Template
#
# This template runs comprehensive emulator-based tests for Azure Functions Extension Bundles.
# It supports both regular and Preview bundles by dynamically reading configuration from bundleConfig.json.
#
# Key features:
# - Runs on Linux agents with Docker support for emulator services
# - Builds Linux extension bundles as a prerequisite
# - Starts Azure service emulators (Event Hubs, Storage, etc.) via Docker Compose
# - Sets up Python 3.12 environment with test dependencies from pyproject.toml
# - Runs mock extension bundle site to simulate CDN behavior
# - Executes pytest-based emulator tests with proper artifact collection
# - Publishes test results and debug artifacts to Azure DevOps
#
# Dependencies:
# - Docker and Docker Compose available on the agent
# - Python 3.12 support
# - Access to build Linux extension bundles
# - Network access for emulator services
parameters:
  - name: official
    type: boolean
    default: false

  - name: poolName
    type: string

jobs:
  - job: EmulatorTests
    displayName: Run Emulator Tests
    pool:
      name: ${{ parameters.poolName }}
      image: 1es-ubuntu-22.04
      os: linux
    templateContext:
      outputParentDirectory: $(Build.ArtifactStagingDirectory)
      outputs:
        - output: pipelineArtifact
          displayName: Publish emulator test artifacts
          path: $(Build.ArtifactStagingDirectory)
          artifact: emulator-test-results

    steps:
      # Download template artifacts for the build
      # Official templates
      - task: DownloadBuildArtifacts@1
        displayName: 'Download Official Templates'
        inputs:
          buildType: 'specific'
          project: '3f99e810-c336-441f-8892-84983093ad7f'
          pipeline: '963'
          buildVersionToDownload: 'latestFromBranch'
          branchName: 'refs/heads/dev'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(Build.Repository.LocalPath)/templatesArtifacts'
        condition: ${{ parameters.official }}

      # Public templates
      - task: DownloadBuildArtifacts@1
        displayName: 'Download Public Templates'
        inputs:
          buildType: 'specific'
          project: 'ae7e3bf3-d41a-4480-9ac0-b6cf9df9ac24'
          pipeline: '976'
          buildVersionToDownload: 'latestFromBranch'
          branchName: 'refs/heads/dev'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(Build.Repository.LocalPath)/templatesArtifacts'
        condition: ${{ eq(parameters.official, false) }}

      # Build the Linux bundle first
      - task: DotNetCoreCLI@2
        displayName: 'Build Linux Bundle'
        inputs:
          command: 'run'
          workingDirectory: './build'
          arguments: 'PackageBundlesLinux'
        env:
          BUILD_REPOSITORY_LOCALPATH: '$(Build.Repository.LocalPath)'
          TEMPLATES_ARTIFACTS_DIRECTORY: '$(Build.Repository.LocalPath)/templatesArtifacts' # Verify build artifacts exist

      - script: |
          echo "Checking for build artifacts..."
          echo "=== Checking artifacts directory ==="
          if [ -d "artifacts" ]; then
            echo "✓ artifacts directory exists"
            ls -la artifacts/
            if ls artifacts/*.zip 2>/dev/null; then
              echo "✓ Bundle artifacts found in artifacts directory:"
              ls -la artifacts/*.zip
            else
              echo "✗ No zip files found in artifacts directory"
            fi
          else
            echo "✗ artifacts directory does not exist"
          fi

          echo "=== Checking bin directory structure ==="
          if [ -d "bin" ]; then
            echo "Available bin subdirectories:"
            ls -la bin/
            
            echo "=== Checking bin/linux_x64 contents ==="
            if [ -d "bin/linux_x64" ]; then
              ls -la bin/linux_x64/
            fi
            
            echo "=== Checking bin/any_any contents ==="
            if [ -d "bin/any_any" ]; then
              ls -la bin/any_any/
            fi
          fi

          echo "=== Checking bundleConfig.json ==="
          if [ -f "src/Microsoft.Azure.Functions.ExtensionBundle/bundleConfig.json" ]; then
            echo "✓ bundleConfig.json found"
            cat src/Microsoft.Azure.Functions.ExtensionBundle/bundleConfig.json
          else
            echo "✗ bundleConfig.json not found"
            exit 1
          fi

          echo "=== Final verification ==="
          # Check if we have either artifacts/*.zip or any bin subdirectory with zips
          if ls artifacts/*.zip 2>/dev/null || ls bin/*/*.zip 2>/dev/null; then
            echo "✓ Extension bundle artifacts found"
          else
            echo "✗ No extension bundle zip files found anywhere"
            exit 1
          fi
        displayName: 'Verify Build Artifacts'

      # Start emulator services with Docker Compose
      - script: |
          docker version
          docker compose version
          cd tests/emulator_tests/utils/eventhub
          docker compose up -d
          echo "Waiting for emulator services to start..."
          sleep 30
          cd ../mysql
          docker compose up -d
          echo "Waiting for mysql service to start..."
          sleep 30
          docker compose ps
        displayName: 'Start Emulator Services'

      # Set up Python 3.12 and create virtual environment
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.12'
          addToPath: true
          architecture: 'x64'
        displayName: 'Set up Python 3.12'

      - script: |
          cd tests
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
        displayName: 'Install Python Dependencies' # Start mock extension site in background
      - script: |
          cd tests
          source venv/bin/activate
          echo "Starting mock extension site on port 8000..."

          python -m invoke -c test_setup mock-extension-site --port 8000 &

          MOCK_SITE_PID=$!
          echo "Mock site started with PID: $MOCK_SITE_PID"
          echo "##vso[task.setvariable variable=MOCK_SITE_PID]$MOCK_SITE_PID"
          sleep 10

          # Verify mock site is running on port 8000
          if curl -f http://localhost:8000/ 2>/dev/null; then
            echo "✅ Mock extension site is running successfully on port 8000"
            echo "Extension bundle source URI: http://localhost:8000"
          else
            echo "❌ Warning: Mock extension site may not be responding on port 8000"
            ps aux | grep mock-extension-site
            netstat -tlnp | grep :8000 || echo "No process listening on port 8000"
          fi
        displayName: 'Start Mock Extension Site'

      # Set up webhost
      - script: |
          cd tests
          source venv/bin/activate
          python -m invoke -c test_setup webhost
        displayName: 'Setup WebHost'
      # Set debug environment variable and run tests
      - script: |
          cd tests
          source venv/bin/activate
          cd ..
          export PYAZURE_WEBHOST_DEBUG=1
          export FUNCTIONS_EXTENSIONBUNDLE_SOURCE_URI="http://localhost:8000"
          export MySqlConnectionString="Server=localhost;UserID =root;Password=password;Database=testdb;Port=3307"
          echo "Running emulator tests..."
          echo "Mock extension site URL: $FUNCTIONS_EXTENSIONBUNDLE_SOURCE_URI"
          python -m pytest tests/emulator_tests -v --tb=short --junitxml=$(Build.ArtifactStagingDirectory)/test-results.xml
        displayName: 'Run Emulator Tests'
        env:
          PYAZURE_WEBHOST_DEBUG: 1
          FUNCTIONS_EXTENSIONBUNDLE_SOURCE_URI: 'http://localhost:8000'

      # Copy webhost config for debugging
      - script: |
          if [ -f tests/webhost_config.txt ]; then
            cp tests/webhost_config.txt $(Build.ArtifactStagingDirectory)/
            echo "WebHost config copied for artifact upload"
          else
            echo "Warning: webhost_config.txt not found"
          fi
        displayName: 'Copy WebHost Config'
        condition: always()

      # Publish test results
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: '$(Build.ArtifactStagingDirectory)/test-results.xml'
          testRunTitle: 'Emulator Tests'
          failTaskOnFailedTests: true
        condition: always()
        displayName: 'Publish Test Results'
      # Cleanup: stop emulator services and mock site
      - script: |
          echo "Cleaning up services..."

          # Stop mock site if PID is available
          if [ ! -z "$MOCK_SITE_PID" ]; then
            echo "Stopping mock site (PID: $MOCK_SITE_PID)"
            kill $MOCK_SITE_PID 2>/dev/null || true
          fi

          # Stop any remaining mock-extension-site processes
          pkill -f mock-extension-site || true

          # Stop emulator services
          cd tests/emulator_tests/utils/eventhub
          docker compose down -v
          echo "Cleanup completed"
        displayName: 'Cleanup Services'
        condition: always()
